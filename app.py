from aiogram import Router, Bot
from aiogram import types
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext   # –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import FSInputFile


from config import TOKEN, EMAIL, PHONE, WEBSITE, BOT_USERNAME, FEEDBACK_FORM
from questions import questions

import animals_info
from animals_info import animal_info
from animals_info import animal_images

bot = Bot(token=TOKEN)
router = Router()

# –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
animals = animals_info.animals
current_question_index = 0

async def send_main_menu(chat_id: int, state: FSMContext, exclude: list[str] | None = None):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –¥—Ä—É–≥–∏–º —Ñ—É–Ω–∫—Ü–∏—è–º,
    –∏—Å–∫–ª—é—á–∞—è —É–∫–∞–∑–∞–Ω–Ω—ã–µ –ø—É–Ω–∫—Ç—ã.
    """
    menu_actions = {
        "start": "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å—Ç–∞—Ä—Ç—É",
        "info": "–ù–∞—à–∞ —Ü–µ–ª—å",
        "share": "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º",
        "feedback": "–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å",
        "restart": "–ü—Ä–æ–π—Ç–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É"
    }

    # –ï—Å–ª–∏ exclude –Ω–µ None, –∏—Å–∫–ª—é—á–∞–µ–º –≤—Å–µ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –ø—É–Ω–∫—Ç—ã
    if exclude:
        for action_to_exclude in exclude:
            if action_to_exclude in menu_actions:
                del menu_actions[action_to_exclude]

    # –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏
    inline_keyboard = [
        [types.InlineKeyboardButton(text=label, callback_data=f"menu:{action}")]
        for action, label in menu_actions.items()
    ]

    markup = types.InlineKeyboardMarkup(inline_keyboard=inline_keyboard)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    menu_message = await bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º id —Å–æ–æ–±—â–µ–Ω–∏—è
    await state.update_data(menu_message_id=menu_message.message_id)


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@router.message(Command('start', 'help'))
async def start(msg: Message, state: FSMContext):
    text = """ –¢–æ—Ç–µ–º–Ω—ã–π –∫–æ–º–ø–∞—Å: –æ—Ç–∫—Ä–æ–π —Å–≤–æ–π –ø—É—Ç—å –≤ <b>‚Äú–ö–ª—É–± –¥—Ä—É–∑–µ–π‚Äù</b>!

–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?\n <b>–ü—Ä–æ—Å—Ç–æ —Å–ª–µ–¥—É–π —ç—Ç–∏–º —à–∞–≥–∞–º:</b>

1. –í—ã–±–µ—Ä–∏ —Ç–æ—Ç –æ—Ç–≤–µ—Ç, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç—Ä–∞–∂–∞–µ—Ç —Ç–≤–æ–∏ —á—É–≤—Å—Ç–≤–∞ –∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è.
2. –ë—É–¥—å —á–µ—Å—Ç–Ω—ã–º —Å —Å–æ–±–æ–π, –≤–µ–¥—å —Ç–≤–æ–π –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∑–≤–µ—Ä—å —É–∂–µ –≥–æ—Ç–æ–≤ —Ä–∞—Å–∫—Ä—ã—Ç—å—Å—è!
<b>–ß—Ç–æ —Ç–µ–±—è –∂–¥—ë—Ç?</b> 

–ü—Ä–æ–π–¥—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—É, —Ç—ã —É–∑–Ω–∞–µ—à—å —Ç–æ—Ç–µ–º–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –æ–ª–∏—Ü–µ—Ç–≤–æ—Ä—è—Ç—å —Ç–≤–æ—é –ª–∏—á–Ω–æ—Å—Ç—å. 
–ü–æ–∑–Ω–∞–∫–æ–º—å—Å—è –ø–æ–±–ª–∏–∂–µ —Å –ø—Ä–æ–≥—Ä–∞–º–º–æ–π <b>‚Äú–ö–ª—É–± –¥—Ä—É–∑–µ–π‚Äù –ú–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ –∑–æ–æ–ø–∞—Ä–∫–∞</b>, –∫–æ—Ç–æ—Ä–∞—è –¥–∞—Å—Ç —Ç–µ–±–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å:

1. –ü–æ—á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å —Å–≤—è–∑—å —Å –∂–∏–≤–æ—Ç–Ω—ã–º–∏ –∑–æ–æ–ø–∞—Ä–∫–∞.
2. –ü–æ–º–æ–≥–∞—Ç—å –≤ –∏—Ö –∑–∞—â–∏—Ç–µ –∏ —É—Ö–æ–¥–µ.
3. –ü—Ä–∏–≥–ª–∞—Å–∏ –¥—Ä—É–∑–µ–π –ø—Ä–æ–π—Ç–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –∏ —É–∑–Ω–∞—Ç—å, –∫—Ç–æ —è–≤–ª—è–µ—Ç—Å—è –∏—Ö —Ç–æ—Ç–µ–º–æ–º! –î–µ–ª–∏—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∏ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è–º–∏ –æ ‚Äú–ö–ª—É–±–µ –¥—Ä—É–∑–µ–π‚Äù –∏ –∑–æ–æ–ø–∞—Ä–∫–µ –≤ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç—è—Ö!
    """
    await bot.send_message(msg.chat.id, text, parse_mode='HTML')
    await send_main_menu(msg.chat.id, state, exclude=["start", "share"])


@router.message(Command('info'))
async def info(msg: Message, state: FSMContext):
    # –ß–∞—Å—Ç—å —Ç–µ–∫—Å—Ç–∞ –¥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    text_before = """
–û—Å–Ω–æ–≤–Ω–∞—è —Ü–µ–ª—å –ú–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ –∑–æ–æ–ø–∞—Ä–∫–∞ ‚Äî —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –±–∏–æ—Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è –ø–ª–∞–Ω–µ—Ç—ã. 
–ö–æ–≥–¥–∞ –≤—ã –±–µ—Ä—ë—Ç–µ –∂–∏–≤–æ—Ç–Ω–æ–µ –ø–æ–¥ –æ–ø–µ–∫—É, –≤—ã –ø–æ–º–æ–≥–∞–µ—Ç–µ –Ω–∞–º —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Ä–µ–¥–∫–∏–µ –≤–∏–¥—ã –∏ –∑–∞–±–æ—Ç–∏—Ç—å—Å—è –æ–± –∏—Ö –±—É–¥—É—â–µ–º.
"""
    file_path = 'images/selection/MSK.jpeg'

    text_after = f"""
–°–µ–π—á–∞—Å –æ–ø–µ–∫—É–Ω—ã —Å—Ç–∞–ª–∏ —á–∞—Å—Ç—å—é —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ ‚Äî <b>–ö–ª—É–± –¥—Ä—É–∑–µ–π –ú–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ –∑–æ–æ–ø–∞—Ä–∫–∞</b>, 
–≥–¥–µ –∫–∞–∂–¥—ã–π –º–æ–∂–µ—Ç –≤–Ω–µ—Å—Ç–∏ —Å–≤–æ–π –≤–∫–ª–∞–¥ –≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏—Ä–æ–¥—ã –∏ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –∂–∏–∑–Ω–∏ –∑–æ–æ–ø–∞—Ä–∫–∞.

–ù–µ —Ç–µ—Ä—è–π –≤—Ä–µ–º–µ–Ω–∏, —É–∑–Ω–∞–π –∫–∞–∫ –º–æ–∂–µ—à—å –ø–æ–º–æ—á—å –Ω–∞—à–∏–º –æ–ø–µ–∫—É–Ω–∞–º!!!

–î–ª—è —Å–≤—è–∑–∏:
üìß –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞: <a href="mailto:{EMAIL}">{EMAIL}</a>  
üìû –¢–µ–ª–µ—Ñ–æ–Ω: <a href="tel:{PHONE.replace(' ', '').replace('-', '')}">{PHONE}</a>
üåê –í–µ–±—Å–∞–π—Ç: <a href="{WEBSITE}">{WEBSITE}</a>
"""
    await bot.send_message(msg.chat.id, text=text_before, parse_mode='HTML')
    photo = FSInputFile(file_path)
    await bot.send_photo(msg.chat.id, photo)
    await bot.send_message(msg.chat.id, text=text_after, parse_mode='HTML')
    await send_main_menu(msg.chat.id, state, exclude=["info"])



@router.message(Command('share'))
async def share_result(msg: Message, state: FSMContext):
    data = await state.get_data()
    if 'animals' in data:
        result = max(data['animals'], key=data['animals'].get)
        file_path = animal_images.get(result)
        
        if file_path:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–∞–π–ª –¥–ª—è –∂–∏–≤–æ—Ç–Ω–æ–≥–æ
            photo = FSInputFile(file_path)  # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç FSInputFile –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            await bot.send_photo(
                msg.chat.id,
                photo,
                caption=(
                    '–ü–æ–¥–µ–ª–∏—Å—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –≤ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–µ - –ø–æ–º–æ–≥–∏ –æ—Å—Ç–∞–ª—å–Ω—ã–º —É–∑–Ω–∞—Ç—å –æ "–ö–ª—É–±–µ –¥—Ä—É–∑–µ–π".\n\n'
                    f'–ú–æ–µ —Ç–æ—Ç–µ–º–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ: {result}\n\n'
                    f'–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ –Ω–∞—à–µ–º—É –±–æ—Ç—É: {BOT_USERNAME}'
                )
            )
        else:
            await bot.send_message(msg.chat.id, f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è '{result}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

    # –ú–µ–Ω—é (–∏—Å–∫–ª—é—á–∞–µ–º "share")
    await send_main_menu(msg.chat.id, state, exclude=["share"])

# Google forms
@router.message(Command('feedback'))
async def get_feedback(msg: Message, state: FSMContext):
    file_path = 'images/selection/logo.jpg'
    await bot.send_photo(msg.chat.id, FSInputFile(file_path))
    text = f'–ß—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –æ —Ä–∞–±–æ—Ç–µ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:\n\n{FEEDBACK_FORM}'
    await bot.send_message(msg.chat.id, text)
    await send_main_menu(msg.chat.id, state, exclude=["feedback"])


@router.message(Command('restart'))
async def restart(msg: Message, state: FSMContext):
    await state.clear()
    await quiz(msg, state)

class QuizState(StatesGroup):
    waiting_for_answer = State()

# –õ–æ–≥–∏–∫–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
@router.message(Command('quiz'))
async def quiz(msg: Message, state: FSMContext):
    await state.update_data(current_question_index=0,
                            animals={animal: 0 for animal in animals.keys()})
    await send_question(msg.chat.id, state, msg)

async def send_question(chat_id: int, state: FSMContext, msg: Message):
    data = await state.get_data()
    current_question_index = data.get('current_question_index', 0)
    if current_question_index < len(questions):
        question = questions[current_question_index]
        # –°–æ–∑–¥–∞–Ω–∏–µ Inline-–∫–Ω–æ–ø–æ–∫
        inline_keyboard_buttons = [
            [types.InlineKeyboardButton(text=option, callback_data=f"answer:{option}")]
            for option in question['options']
        ]
        inline_markup = types.InlineKeyboardMarkup(inline_keyboard=inline_keyboard_buttons)
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–æ–ø—Ä–æ—Å–æ–º (–µ—Å–ª–∏ –æ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
        question_message_id = data.get('question_message_id')
        if question_message_id:
            try:
                await bot.delete_message(chat_id, question_message_id)
            except Exception:
                pass
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
        sent_message = await bot.send_message(chat_id, question['question'], reply_markup=inline_markup)
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ID —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≤–æ–ø—Ä–æ—Å–æ–º
        await state.update_data(question_message_id=sent_message.message_id)
        # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
        await state.set_state(QuizState.waiting_for_answer)
    else:
        await show_result(chat_id, state, msg)

@router.callback_query(lambda c: c.data.startswith("answer:"))
async def handle_inline_answer(callback_query: types.CallbackQuery, state: FSMContext):
    selected_option = callback_query.data.split(":")[1]
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    current_question_index = data.get('current_question_index', 0)
    if current_question_index < len(questions):
        question = questions[current_question_index]
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á—ë—Ç—á–∏–∫–∏ –∂–∏–≤–æ—Ç–Ω—ã—Ö
        for animal in question['animal_mapping'].get(selected_option, []):
            data['animals'][animal] = data['animals'].get(animal, 0) + 1
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data(current_question_index=current_question_index + 1, animals=data['animals'])
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        try:
            await callback_query.message.delete()
        except Exception as e:
            pass
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
        await send_question(callback_query.message.chat.id, state, callback_query.message)
    else:
        await show_result(callback_query.message.chat.id, state, callback_query.message) #!!!

@router.callback_query(lambda c: c.data.startswith("menu:"))
async def handle_menu_callback(callback_query: types.CallbackQuery, state: FSMContext):
    action = callback_query.data.split("menu:")[1]

    # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –º–µ–Ω—é
    data = await state.get_data()
    menu_message_id = data.get('menu_message_id')
    if menu_message_id:
        try:
            await bot.delete_message(callback_query.message.chat.id, menu_message_id)
        except Exception:
            pass

    # –í—ã–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–æ–º–∞–Ω–¥—É
    if action == "start":
        await start(callback_query.message, state)
    elif action == "info":
        await info(callback_query.message, state)
    elif action == "share":
        await share_result(callback_query.message, state)
    elif action == "feedback":
        await get_feedback(callback_query.message, state)
    elif action == "restart":
        await restart(callback_query.message, state)
    # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ Telegram
    await callback_query.answer()

async def show_result(chat_id: int, state: FSMContext, msg: Message):
    data = await state.get_data()
    result = max(data['animals'], key=data['animals'].get)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
    await bot.send_message(chat_id, f'–¢–≤–æ–µ —Ç–æ—Ç–µ–º–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ - <b>{result}</b>! üéâ', parse_mode='HTML')
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∂–∏–≤–æ—Ç–Ω–æ–º
    await animal_info(chat_id, result)
    await send_main_menu(msg.chat.id, state)

